{"version":3,"sources":["components/layout/PageWrapper.tsx","utils/d3.ts","utils/router.ts","components/charts/world/WorldMap.tsx","pages/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MenuItem","onClick","to","props","Item","key","children","StyledLayoutContent","styled","Content","StyledContentContainer","div","PageWrapper","location","this","Header","className","type","selectedKeys","pathname","theme","mode","style","lineHeight","Footer","textAlign","React","withRouter","centreOfEurope","d3Path","width","height","d3","projection","center","scale","translate","d3Projection","url","window","hostname","startsWith","StyledMap","WorldMap","d3Container","useRef","useState","selected","setSelected","useEffect","data","current","svg","path","then","json","countriesGroup","append","attr","selectAll","features","enter","d","i","properties","iso_a3","on","md","ref","name","JSON","stringify","Dashboard","title","subTitle","App","basename","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.829fc356.chunk.js","sourcesContent":["import * as React from 'react'\nimport { Col, Layout, Menu, Row } from 'antd'\nimport { Link, RouteComponentProps, withRouter } from 'react-router-dom'\nimport styled from 'styled-components'\n\ninterface IPageWrapper {\n}\n\ninterface IMenuItemProps {\n    onClick?: (param: any | undefined) => void\n    to?: string\n    children: React.ReactNode\n}\n\nconst MenuItem = ({ onClick, to, ...props }: IMenuItemProps) =>\n    onClick ? (\n        <Menu.Item {...props} onClick={onClick} key={to}>\n            <span>{props.children}</span>\n            {to && <Link to={to} />}\n        </Menu.Item>\n    ) : (\n        <Menu.Item {...props} key={to}>\n            <span>{props.children}</span>\n        </Menu.Item>\n    )\n\nconst StyledLayoutContent = styled(Layout.Content)`\n    padding: 50px;\n    min-height: calc(100vh - 64px /*header*/ - 84px /*footer*/);\n`\n\nconst StyledContentContainer = styled.div`\n    background: #fff;\n    padding: 24px;\n    min-height: calc(100vh - 64px /*header*/ - 84px /*footer*/ - 100px /*padding*/);\n`\n\nclass PageWrapper extends React.Component<IPageWrapper & RouteComponentProps> {\n    render() {\n        const { location } = this.props\n\n        return (\n            <Layout>\n                <Layout.Header className=\"header\">\n                    <Row type=\"flex\">\n                        <Col>\n                            <Menu\n                                selectedKeys={[location.pathname]}\n                                theme=\"dark\"\n                                mode=\"horizontal\"\n                                style={{ lineHeight: '64px' }}\n                            >\n                                <MenuItem to={'/'}>\n                                    Dashboard\n                                </MenuItem>\n                            </Menu>\n                        </Col>\n                    </Row>\n                </Layout.Header>\n                <StyledLayoutContent>\n                    <StyledContentContainer>\n                        {this.props.children}\n                    </StyledContentContainer>\n                </StyledLayoutContent>\n                <Layout.Footer style={{ textAlign: 'center' }}>\n                    <p>InfoVis 2019 Q2 (Group 25)</p>\n                </Layout.Footer>\n            </Layout>\n        )\n    }\n}\n\nexport default withRouter(PageWrapper)\n","import * as d3 from 'd3'\n\nconst centreOfEurope: [number, number] = [12, 58]\n\nconst scaleToCenter = 0.8\n\nexport const d3Projection = (width: number, height: number) => d3\n    .geoMercator()\n    .center(centreOfEurope) // set centre to centre of europe\n    .scale(scaleToCenter * height)\n    .translate([(width / 2), height / 2]) // ensure centered in group\n\n// Define map path\nexport const d3Path = (width: number, height: number) => d3\n    .geoPath()\n    .projection(d3Projection(width, height))\n","\nexport const basename = 'info-vis-project'\n\nexport const url = (url: string) => window.location.hostname.startsWith('localhost') ? url : `/${basename}${url}`\n","import * as React from 'react'\nimport { useEffect, useRef, useState } from 'react'\nimport * as d3 from 'd3'\nimport { d3Path } from '../../../utils/d3'\nimport styled from 'styled-components'\nimport { Row, Col } from 'antd'\nimport { url } from '../../../utils/router'\n\ninterface IWorldMap {\n    // TODO: Correct typing\n    data: any[]\n}\n\nconst width = 700\nconst height = 700\n\nconst StyledMap = styled.div`\n    svg rect {\n        fill: #ffffff; /* map background colour */\n        stroke: #2A2C39; /* map border colour */\n        stroke-width: 1; /* map border width */\n    }\n\n    .country {\n        fill: #4B5358; /* country colour */\n        stroke: #2A2C39; /* country border colour */\n        stroke-width: 1; /* country border width */\n        cursor: pointer;\n        \n        &.country-selected {\n            fill: #ff0000; /* country colour */\n        }\n    }\n    .country:hover {\n        fill: #ffffff; /* country colour */\n       \n    }\n\n    .country-on {\n        //fill: #4B5358; /* highlight colour for selected country */\n    }\n\n    .countryLabel {\n        display: none; /* hide all country labels by default */\n    }\n\n    .countryName {\n        fill: #FFFAFF; /* country label text colour */\n    }\n\n    .countryLabelBg {\n        fill: #30BCED; /* country label background colour */\n    }\n`\n\ninterface ICountry {\n    properties: Record<string, string>\n}\n\nexport const WorldMap = (props: IWorldMap) => {\n    const d3Container = useRef(null)\n\n    const [selected, setSelected] = useState(null as ICountry | null)\n\n    useEffect(\n        () => {\n            if (props.data && d3Container.current) {\n                const svg = d3.select(d3Container.current)\n                const path = d3Path(width, height)\n\n                const res = d3.json(url('/assets/custom.geo.json'))\n                    .then(json => {\n                        //Bind data and create one path per GeoJSON feature\n                        const countriesGroup = svg.append(\"g\").attr(\"id\", \"map\")\n                        // add a background rectangle\n                        countriesGroup\n                            .append(\"rect\")\n                            .attr(\"x\", 0)\n                            .attr(\"y\", 0)\n                            .attr(\"width\", width)\n                            .attr(\"height\", height)\n\n                        // draw a path for each feature/country\n                        const countries = countriesGroup\n                            .selectAll(\"path\")\n                            .data(json.features)\n                            .enter()\n                            .append(\"path\")\n                            // @ts-ignore\n                            .attr(\"d\", path)\n                            // .attr(\"id\", (d, i) => \"country\" + d.properties.iso_a3)\n                            .attr(\"class\", (d: ICountry, i: any) => selected && (d.properties.iso_a3 === selected.properties.iso_a3)\n                                ? 'country country-selected'\n                                : 'country',\n                            )\n                            //      .attr(\"stroke-width\", 10)\n                            //      .attr(\"stroke\", \"#ff0000\")\n                            // add a mouseover action to show name label for feature/country\n                            // .on(\"mouseover\", function (d, i) {\n                            //     d3.select(\"#countryLabel\" + d.properties.iso_a3).style(\"display\", \"block\")\n                            // })\n                            // .on(\"mouseout\", function (d, i) {\n                            //     d3.select(\"#countryLabel\" + d.properties.iso_a3).style(\"display\", \"none\")\n                            // })\n                            // // add an onclick action to zoom into clicked country\n                            .on(\"click\", (d: ICountry, i: any) => {\n                                setSelected(d)\n                            })\n                    })\n\n            }\n        },\n        [props.data, selected, d3Container.current],\n    )\n    return (\n        <Row>\n            <Col md={14}>\n                <StyledMap>\n                    <svg\n                        className=\"d3-component\"\n                        width={width}\n                        height={height}\n                        ref={d3Container}\n                    />\n                </StyledMap>\n            </Col>\n            <Col md={10}>\n                {selected && <div>\n                    <h1>{selected.properties.name}</h1>\n                    <pre>{JSON.stringify(selected.properties, null, 2)}</pre>\n                </div>}\n            </Col>\n        </Row>\n    )\n}\n\nexport default WorldMap\n","import * as React from 'react'\nimport { PageHeader } from 'antd'\nimport WorldMap from '../components/charts/world/WorldMap'\n\ninterface IDashboard {\n\n}\n\nclass Dashboard extends React.Component<IDashboard> {\n\n    render() {\n        const {} = this.props\n\n        return <PageHeader\n            title=\"Dashboard for InfoVis Project\"\n            subTitle=\"Some dataset description\"\n        >\n            <WorldMap data={[1,2,3]} />\n\n        </PageHeader>\n    }\n}\n\nexport default Dashboard\n","import React from 'react'\nimport { BrowserRouter } from 'react-router-dom'\nimport PageWrapper from './components/layout/PageWrapper'\nimport Dashboard from './pages/Dashboard'\nimport { url } from './utils/router'\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter basename={url('')}>\n            <PageWrapper>\n                <Dashboard />\n            </PageWrapper>\n        </BrowserRouter>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.')\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}