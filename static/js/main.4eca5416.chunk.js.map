{"version":3,"sources":["components/layout/SlideshowSteps.tsx","utils/router.ts","utils/d3.ts","components/layout/D3Blackbox.tsx","components/charts/world/WorldMap.tsx","components/layout/PageWrapper.tsx","pages/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Step","StyledStepsContainer","styled","div","SlideshowSteps","useState","step","setStep","progressDot","current","onChange","title","description","url","window","location","hostname","startsWith","centreOfEurope","d3Path","width","height","d3","projection","center","scale","translate","d3Projection","D3Blackbox","x","y","data","init","render","refAnchor","React","elements","setElements","useLayoutEffect","key","value","useEffect","ref","style","transform","StyledMap","WorldMap","selected","setSelected","d3Container","useRef","setWidth","setHeight","geoData","setGeoData","resize","getBoundingClientRect","addEventListener","removeEventListener","then","json","features","map","d","properties","iso_a3","svg","setElement","countriesGroup","append","attr","countries","selectAll","enter","exit","remove","path","i","on","StyledLayoutContent","Content","StyledContentContainer","withRouter","country","setCountry","md","Dashboard","this","props","App","basename","Boolean","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4eca5416.chunk.js","sourcesContent":["import * as React from 'react'\nimport { useState } from 'react'\nimport { Divider, Steps } from 'antd'\nimport styled from 'styled-components'\n\nconst { Step } = Steps\n\nconst StyledStepsContainer = styled.div`\n    background-color: #ffffff;\n    padding: 25px 25px 0 25px;\n`\n\nconst SlideshowSteps = ({}) => {\n    const [step, setStep] = useState(0)\n\n    return (\n        <StyledStepsContainer>\n            <Steps progressDot current={step} onChange={setStep}>\n                <Step title=\"The gender gap in the EU\" description=\"\" />\n                <Step title=\"We are on our way, but slowly\" description=\"\" />\n                <Step title=\"Some countries are already doing great\" description=\"\" />\n                <Step title=\"But others are staying behind\" description=\"\" />\n                <Step title=\"A+ for effort\" description=\"\" />\n                <Step title=\"Core domains\" description=\"\" />\n                <Step title=\"See for yourself\" description=\"\" />\n            </Steps>\n            <Divider />\n        </StyledStepsContainer>\n    )\n}\n\nexport default SlideshowSteps\n","export const basename = 'info-vis-project'\n\nexport const url = (url: string) => (window.location.hostname.startsWith('localhost') ? url : `/${basename}${url}`)\n","import * as d3 from 'd3'\n\nconst centreOfEurope: [number, number] = [12, 58]\n\nconst scaleToCenter = 0.8\n\nexport const d3Projection = (width: number, height: number) =>\n    d3\n        .geoMercator()\n        .center(centreOfEurope) // set centre to centre of europe\n        .scale(scaleToCenter * height)\n        .translate([width / 2, height / 2]) // ensure centered in group\n\n// Define map path\nexport const d3Path = (width: number, height: number) => d3.geoPath().projection(d3Projection(width, height))\n","import * as React from 'react'\nimport { useEffect, useLayoutEffect, useState } from 'react'\nimport * as d3 from 'd3'\n\ninterface ID3Blackbox {\n    x: number\n    y: number\n    data: any\n    width: number\n    height: number\n    init: (svg: any, setElement: (key: string, value: any) => void) => void\n    render: (svg: any, data: any, elements: Record<string, any>) => void\n}\n\nconst D3Blackbox = ({ x, y, data, width, height, init, render }: ID3Blackbox) => {\n    const refAnchor = React.useRef(null)\n\n    const [elements, setElements] = useState({})\n\n    useLayoutEffect(() => {\n        const elements = {} as Record<string, any>\n        init(d3.select(refAnchor.current), (key: string, value: any) => {\n            elements[key] = value\n        })\n\n        setElements(elements)\n    }, [])\n\n    useEffect(() => {\n        if (elements && data) {\n            render(d3.select(refAnchor.current), data, elements)\n        }\n    }, [elements, data, width, height])\n\n    return <svg ref={refAnchor} style={{ width, height }} transform={`translate(${x}, ${y})`} />\n}\n\nexport default D3Blackbox\n","import * as React from 'react'\nimport { useEffect, useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport { Col, Row } from 'antd'\nimport * as d3 from 'd3'\nimport { url } from '../../../utils/router'\nimport { d3Path } from '../../../utils/d3'\nimport D3Blackbox from '../../layout/D3Blackbox'\n\ninterface IWorldMap {\n    // TODO: Correct typing\n    data: any[]\n    selected: ICountry | null\n    setSelected: (country: ICountry | null) => void\n}\n\nconst StyledMap = styled.div`\n    height: calc(100vh - 140px);\n    svg rect {\n        fill: #ffffff; /* map background colour */\n        //stroke: #2A2C39; /* map border colour */\n        //stroke-width: 1; /* map border width */\n    }\n\n    .country {\n        fill: #4b5358; /* country colour */\n        stroke: #2a2c39; /* country border colour */\n        stroke-width: 1; /* country border width */\n        cursor: pointer;\n\n        &.country-selected {\n            fill: #ff0000; /* country colour */\n        }\n    }\n    .country:hover {\n        fill: #ffffff; /* country colour */\n    }\n\n    .countryLabel {\n        display: none; /* hide all country labels by default */\n    }\n\n    .countryName {\n        fill: #fffaff; /* country label text colour */\n    }\n\n    .countryLabelBg {\n        fill: #30bced; /* country label background colour */\n    }\n`\n\nexport interface ICountry {\n    properties: Record<string, string>\n    selected?: boolean\n}\n\nexport const WorldMap = ({ selected, setSelected, data, ...props }: IWorldMap) => {\n    const d3Container = useRef(null as HTMLDivElement | null)\n    const [width, setWidth] = useState(800)\n    const [height, setHeight] = useState(800)\n    const [geoData, setGeoData] = useState(null as any)\n\n    useEffect(() => {\n        const resize = () => {\n            if (d3Container && d3Container.current) {\n                setHeight(d3Container.current.getBoundingClientRect().height)\n                setWidth(d3Container.current.getBoundingClientRect().width)\n            }\n        }\n        window.addEventListener('resize', resize)\n\n        return () => window.removeEventListener('resize', resize)\n    })\n\n    useEffect(() => {\n        // Update width/height\n        if (d3Container && d3Container.current) {\n            setHeight(d3Container.current.getBoundingClientRect().height)\n            setWidth(d3Container.current.getBoundingClientRect().width)\n        }\n    })\n\n    useEffect(() => {\n        // Load initial data\n        if (!geoData) {\n            d3.json(url('/assets/custom.geo.json')).then(json => {\n                setGeoData(json)\n            })\n        }\n    })\n\n    useEffect(() => {\n        // Update selected\n        if (geoData) {\n            setGeoData({\n                ...geoData,\n                features: geoData.features.map((d: ICountry) =>\n                    selected && d.properties.iso_a3 === selected.properties.iso_a3\n                        ? {\n                              ...d,\n                              selected: true,\n                          }\n                        : {\n                              ...d,\n                              selected: false,\n                          },\n                ),\n            })\n        }\n    }, [selected])\n\n    return (\n        <Row>\n            <Col>\n                <StyledMap ref={d3Container}>\n                    <D3Blackbox\n                        x={0}\n                        y={0}\n                        width={width}\n                        height={height}\n                        data={geoData}\n                        init={(svg, setElement) => {\n                            setElement('path', d3Path(width, height))\n\n                            const countriesGroup = svg.append('g').attr('id', 'map')\n\n                            // add a background rectangle\n                            countriesGroup\n                                .append('rect')\n                                .attr('x', 0)\n                                .attr('y', 0)\n                                .attr('width', width)\n                                .attr('height', height)\n\n                            setElement('countriesGroup', countriesGroup)\n                        }}\n                        render={(svg, data, { countriesGroup }) => {\n                            if (!countriesGroup) {\n                                return\n                            }\n\n                            countriesGroup.attr('width', width).attr('height', height)\n\n                            // draw a path for each feature/country\n                            const countries = countriesGroup.selectAll('path').data(data.features)\n\n                            countries.enter().append('path')\n                            // @ts-ignore\n\n                            countries.exit().remove()\n\n                            const path = d3Path(width, height)\n\n                            countries\n                                .attr('d', path)\n                                .attr('class', (d: ICountry, i: any) =>\n                                    d.selected ? 'country country-selected' : 'country',\n                                )\n                                .on('click', (d: ICountry, i: any) => {\n                                    setSelected(d)\n                                })\n                        }}\n                    />\n                </StyledMap>\n            </Col>\n        </Row>\n    )\n}\n\nexport default WorldMap\n","import * as React from 'react'\nimport { Col, Layout, Menu, Row } from 'antd'\nimport { Link, withRouter } from 'react-router-dom'\nimport styled from 'styled-components'\nimport SlideshowSteps from './SlideshowSteps'\nimport WorldMap, { ICountry } from '../charts/world/WorldMap'\nimport { useRef, useState } from 'react'\n\ninterface IPageWrapper {}\n\ninterface IMenuItemProps {\n    onClick?: (param: any | undefined) => void\n    to?: string\n    children: React.ReactNode\n}\n\nconst MenuItem = ({ onClick, to, ...props }: IMenuItemProps) =>\n    onClick ? (\n        <Menu.Item {...props} onClick={onClick} key={to}>\n            <span>{props.children}</span>\n            {to && <Link to={to} />}\n        </Menu.Item>\n    ) : (\n        <Menu.Item {...props} key={to}>\n            <span>{props.children}</span>\n        </Menu.Item>\n    )\n\nconst StyledLayoutContent = styled(Layout.Content)`\n    padding: 50px;\n    min-height: calc(100vh - 64px /*header*/ - 84px /*footer*/);\n`\n\nconst StyledContentContainer = styled.div`\n    background: #fff;\n    padding: 24px;\n    min-height: calc(100vh - 64px /*header*/ - 84px /*footer*/ - 100px /*padding*/);\n`\n\nconst PageWrapper = () => {\n    const [country, setCountry] = useState(null as ICountry | null)\n\n    return (\n        <Layout>\n            <SlideshowSteps />\n            <Row>\n                <Col md={12}>\n                    <WorldMap data={[]} selected={country} setSelected={setCountry} />\n                </Col>\n                <Col md={12}>\n                    <StyledLayoutContent>\n                        <StyledContentContainer>\n                            <h1>Test</h1>\n                            <p>Test</p>\n                        </StyledContentContainer>\n                    </StyledLayoutContent>\n                </Col>\n            </Row>\n        </Layout>\n    )\n}\n\nexport default withRouter(PageWrapper)\n","import * as React from 'react'\nimport { PageHeader } from 'antd'\nimport WorldMap from '../components/charts/world/WorldMap'\n\ninterface IDashboard {}\n\nclass Dashboard extends React.Component<IDashboard> {\n    render() {\n        const {} = this.props\n\n        return null\n        // return <WorldMap data={[1,2,3]} />\n    }\n}\n\nexport default Dashboard\n","import React from 'react'\nimport { BrowserRouter } from 'react-router-dom'\nimport PageWrapper from './components/layout/PageWrapper'\nimport Dashboard from './pages/Dashboard'\nimport { url } from './utils/router'\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter basename={url('')}>\n            <PageWrapper>\n                <Dashboard />\n            </PageWrapper>\n        </BrowserRouter>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.')\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}